import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, action=None, cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.depth = 0
        self.cost = cost
        if parent:
            self.depth = parent.depth + 1
        self.priority = self.cost + self.heuristic()

    def __lt__(self, other):
        return self.priority < other.priority

    def __eq__(self, other):
        return self.state == other.state

    def __hash__(self):
        return hash(tuple(map(tuple, self.state)))

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.state])

    def is_goal(self):
        goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.state == goal_state

    def heuristic(self):
        # Manhattan distance heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    goal_row, goal_col = divmod(self.state[i][j] - 1, 3)
                    distance += abs(i - goal_row) + abs(j - goal_col)
        return distance

    def get_neighbors(self):
        neighbors = []
        zero_row, zero_col = self.find_zero()
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]

        for move in moves:
            new_row, new_col = zero_row + move[0], zero_col + move[1]
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row[:] for row in self.state]
                new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], 0
                neighbors.append(PuzzleNode(new_state, parent=self, action=(zero_row, zero_col), cost=self.cost+1))
        return neighbors

    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

def solve_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    frontier = [initial_node]
    explored = set()

    while frontier:
        current_node = heapq.heappop(frontier)

        if current_node.is_goal():
            return get_solution_path(current_node), current_node.cost

        explored.add(current_node)

        neighbors = current_node.get_neighbors()
        for neighbor in neighbors:
            if neighbor not in explored and neighbor not in frontier:
                heapq.heappush(frontier, neighbor)

    return None, None

def get_solution_path(node):
    path = []
    while node:
        path.insert(0, node.state)
        node = node.parent
    return path

if __name__ == "__main__":
    initial_state = [
        [3, 6 ,1],
        [2, 8, 4],
        [7, 5, 0]
    ]

    solution_path, path_cost = solve_puzzle(initial_state)

    if solution_path:
        for i, state in enumerate(solution_path):
            print(f"Step {i}:\n{PuzzleNode(state)}\n")
        print(f"Path Cost: {path_cost}")
    else:
        print("No solution found.")
