class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, vertex, neighbor):
        if vertex not in self.graph:
            self.graph[vertex] = []
        self.graph[vertex].append(neighbor)

    def dfs(self, start, goal, path=None, visited=None):
        if visited is None:
            visited = set()
        if path is None:
            path = []
        path = path + [start]
        if start == goal:
            return path
        visited.add(start)
        for neighbor in self.graph.get(start, []):
            if neighbor not in visited:
                new_path = self.dfs(neighbor, goal, path, visited)
                if new_path:
                    return new_path
        return None

# Example usage:
graph = Graph()
graph.add_edge(1, 2)
graph.add_edge(1, 3)
graph.add_edge(2, 4)
graph.add_edge(2, 5)
graph.add_edge(3, 6)
graph.add_edge(3, 7)

initial_node = 1
goal_node = 5

print(f"DFS path from node {initial_node} to node {goal_node}:")
path = graph.dfs(initial_node, goal_node)
if path:
    print(" -> ".join(map(str, path)))
else:
    print(f"No path found from node {initial_node} to node {goal_node}.")
